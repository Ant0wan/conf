# .bashrc

function clean_tf_ws() {
	unset TF_WORKSPACE
	terraform workspace select default
	workspaces=($(terraform workspace list| cut -c3- |grep -v default))
	for ws in ${workspaces[@]}
	do
		echo "Checking:  $ws"
		if ! TF_WORKSPACE=$ws terraform state list
		then
			TF_WORKSPACE=default terraform workspace delete $ws
		fi
	done
}

function tf_fmt_ending_eol() {
    for var in "$@"
    do
        if [[ -s "$var" ]]; then
            if [[ -n "$(tail -c 1 "$var")" ]]; then
               gsed -i -e '$a\' $var
            fi
        fi
    done
}

function tfcheck() {
    terraform validate
    terraform fmt -recursive
    tf_fmt_ending_eol *tf
    tflint --format=compact .
}


update_providers() {
	files="$(grep required_providers -nR | awk -F ':' '{ print $1}' | uniq | grep -E '.[.]tf')"
	for file in $files
	do
		providers="$(hclq get terraform.required_providers.*.source --in "${file}" | awk '{ gsub(/[\[\]"]/, ""); gsub(/,/, " "); print }')"
		for each in $providers
		do
			provider="$(echo "$each" | awk -F '/' '{print $2}')"
			latest="$(curl "https://registry.terraform.io/v1/providers/${each}" 2>/dev/null | jq .version -r)"
			echo "${provider} = ${latest}"
			hclq set terraform.required_providers."${provider}".version "${latest}" --in "${file}" --out "${file}"
		done
	done
	unset files providers provider latest
}

alias fmt='terraform fmt -recursive'
alias tflock='terraform providers lock -platform=linux_amd64 -platform=linux_arm64 -platform=darwin_amd64 -platform=windows_amd64 -platform=darwin_arm64'
alias ti='terraform init'
alias twl='terraform workspace list'
alias tws='terraform workspace select'

complete -d -f -C $(which terraform) terraform

export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"

